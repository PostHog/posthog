# serializer version: 1
# name: TestRevenueItemStripeBuilder.test_build_revenue_item_query_with_all_schemas
  '''
  SELECT if(greater(period_months, 1), concat(invoice_item_id, '_', toString(month_index)), invoice_item_id) AS id,
         invoice_item_id AS invoice_item_id,
         'stripe.stripe_test' AS source_label,
         addMonths(timestamp, month_index) AS timestamp,
         created_at AS created_at,
         ifNull(notEmpty(subscription_id), false) AS is_recurring,
         product_id AS product_id,
         customer_id AS customer_id,
         invoice.id AS invoice_id,
         subscription_id AS subscription_id,
         NULL AS session_id,
         NULL AS event_name,
         JSONExtractString(discount, 'coupon', 'name') AS coupon,
         JSONExtractString(discount, 'coupon', 'id') AS coupon_id,
         upper(currency) AS original_currency,
         toDecimal(amount_captured, 10) AS original_amount,
         in(original_currency,
            ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
           if(enable_currency_aware_divider, toDecimal(1, 10), toDecimal(100, 10)) AS currency_aware_divider,
           divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
           'USD' AS currency,
           divideDecimal(convertCurrency(original_currency, currency, currency_aware_amount, _toDate(ifNull(timestamp, toDateTime(0)))), toDecimal(period_months, 10)) AS amount
  FROM
    (SELECT id,
            created_at,
            customer_id,
            subscription_id,
            discount,
            arrayJoin(JSONExtractArrayRaw(assumeNotNull(lines.data))) AS data,
            JSONExtractString(data, 'id') AS invoice_item_id,
            JSONExtractString(data, 'amount') AS amount_captured,
            JSONExtractString(data, 'currency') AS currency,
            JSONExtractString(data, 'price', 'product') AS product_id,
            fromUnixTimestamp(JSONExtractUInt(data, 'period', 'start')) AS period_start,
            fromUnixTimestamp(JSONExtractUInt(data, 'period', 'end')) AS period_end,
            greatest(_toInt16(round(divide(dateDiff('day', ifNull(period_start, created_at), ifNull(period_end, created_at)), 30.44))), 1) AS period_months,
            arrayJoin(range(0, period_months)) AS month_index,
            ifNull(period_start, created_at) AS timestamp
     FROM stripe_test_invoice
     WHERE paid) AS invoice
  UNION ALL
  SELECT id AS id,
         id AS invoice_item_id,
         'stripe.stripe_test' AS source_label,
         created_at AS timestamp,
         created_at AS created_at,
         false AS is_recurring,
                  NULL AS product_id,
                  customer_id AS customer_id,
                  invoice_id AS invoice_id,
                  NULL AS subscription_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  NULL AS coupon,
                  NULL AS coupon_id,
                  upper(currency) AS original_currency,
                  toDecimal(amount_captured, 10) AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, toDecimal(1, 10), toDecimal(100, 10)) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'USD' AS currency,
                    convertCurrency(original_currency, currency, currency_aware_amount, _toDate(ifNull(timestamp, toDateTime(0)))) AS amount
  FROM stripe_test_charge
  WHERE and(or(isNull(invoice_id), empty(invoice_id)), equals(status, 'succeeded'))
  '''
# ---
# name: TestRevenueItemStripeBuilder.test_build_revenue_item_query_with_minimal_schemas
  '''
  SELECT if(greater(period_months, 1), concat(invoice_item_id, '_', toString(month_index)), invoice_item_id) AS id,
         invoice_item_id AS invoice_item_id,
         'stripe.stripe_test' AS source_label,
         addMonths(timestamp, month_index) AS timestamp,
         created_at AS created_at,
         ifNull(notEmpty(subscription_id), false) AS is_recurring,
         product_id AS product_id,
         customer_id AS customer_id,
         invoice.id AS invoice_id,
         subscription_id AS subscription_id,
         NULL AS session_id,
         NULL AS event_name,
         JSONExtractString(discount, 'coupon', 'name') AS coupon,
         JSONExtractString(discount, 'coupon', 'id') AS coupon_id,
         upper(currency) AS original_currency,
         toDecimal(amount_captured, 10) AS original_amount,
         in(original_currency,
            ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
           if(enable_currency_aware_divider, toDecimal(1, 10), toDecimal(100, 10)) AS currency_aware_divider,
           divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
           'USD' AS currency,
           divideDecimal(convertCurrency(original_currency, currency, currency_aware_amount, _toDate(ifNull(timestamp, toDateTime(0)))), toDecimal(period_months, 10)) AS amount
  FROM
    (SELECT id,
            created_at,
            customer_id,
            subscription_id,
            discount,
            arrayJoin(JSONExtractArrayRaw(assumeNotNull(lines.data))) AS data,
            JSONExtractString(data, 'id') AS invoice_item_id,
            JSONExtractString(data, 'amount') AS amount_captured,
            JSONExtractString(data, 'currency') AS currency,
            JSONExtractString(data, 'price', 'product') AS product_id,
            fromUnixTimestamp(JSONExtractUInt(data, 'period', 'start')) AS period_start,
            fromUnixTimestamp(JSONExtractUInt(data, 'period', 'end')) AS period_end,
            greatest(_toInt16(round(divide(dateDiff('day', ifNull(period_start, created_at), ifNull(period_end, created_at)), 30.44))), 1) AS period_months,
            arrayJoin(range(0, period_months)) AS month_index,
            ifNull(period_start, created_at) AS timestamp
     FROM stripe_test_invoice
     WHERE paid) AS invoice
  '''
# ---
# name: TestRevenueItemStripeBuilder.test_calculate_months_query_snapshot
  '''
  SELECT greatest(toInt16(round(divide(dateDiff('day', toDateTime('2021-01-01', 'UTC'), toDateTime('2021-01-07', 'UTC')), 30.44))), 1) AS `greatest(_toInt16(round(divide(dateDiff('day', toDateTime('2021-01-01'), toDateTime('2021-01-07')), 30.44))), 1)`
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueItemStripeBuilder.test_revenue_item_query_with_currency_conversion
  '''
  SELECT if(greater(period_months, 1), concat(invoice_item_id, '_', toString(month_index)), invoice_item_id) AS id,
         invoice_item_id AS invoice_item_id,
         'stripe.stripe_test' AS source_label,
         addMonths(timestamp, month_index) AS timestamp,
         created_at AS created_at,
         ifNull(notEmpty(subscription_id), false) AS is_recurring,
         product_id AS product_id,
         customer_id AS customer_id,
         invoice.id AS invoice_id,
         subscription_id AS subscription_id,
         NULL AS session_id,
         NULL AS event_name,
         JSONExtractString(discount, 'coupon', 'name') AS coupon,
         JSONExtractString(discount, 'coupon', 'id') AS coupon_id,
         upper(currency) AS original_currency,
         toDecimal(amount_captured, 10) AS original_amount,
         in(original_currency,
            ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
           if(enable_currency_aware_divider, toDecimal(1, 10), toDecimal(100, 10)) AS currency_aware_divider,
           divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
           'EUR' AS currency,
           divideDecimal(convertCurrency(original_currency, currency, currency_aware_amount, _toDate(ifNull(timestamp, toDateTime(0)))), toDecimal(period_months, 10)) AS amount
  FROM
    (SELECT id,
            created_at,
            customer_id,
            subscription_id,
            discount,
            arrayJoin(JSONExtractArrayRaw(assumeNotNull(lines.data))) AS data,
            JSONExtractString(data, 'id') AS invoice_item_id,
            JSONExtractString(data, 'amount') AS amount_captured,
            JSONExtractString(data, 'currency') AS currency,
            JSONExtractString(data, 'price', 'product') AS product_id,
            fromUnixTimestamp(JSONExtractUInt(data, 'period', 'start')) AS period_start,
            fromUnixTimestamp(JSONExtractUInt(data, 'period', 'end')) AS period_end,
            greatest(_toInt16(round(divide(dateDiff('day', ifNull(period_start, created_at), ifNull(period_end, created_at)), 30.44))), 1) AS period_months,
            arrayJoin(range(0, period_months)) AS month_index,
            ifNull(period_start, created_at) AS timestamp
     FROM stripe_test_invoice
     WHERE paid) AS invoice
  UNION ALL
  SELECT id AS id,
         id AS invoice_item_id,
         'stripe.stripe_test' AS source_label,
         created_at AS timestamp,
         created_at AS created_at,
         false AS is_recurring,
                  NULL AS product_id,
                  customer_id AS customer_id,
                  invoice_id AS invoice_id,
                  NULL AS subscription_id,
                  NULL AS session_id,
                  NULL AS event_name,
                  NULL AS coupon,
                  NULL AS coupon_id,
                  upper(currency) AS original_currency,
                  toDecimal(amount_captured, 10) AS original_amount,
                  in(original_currency,
                     ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS enable_currency_aware_divider,
                    if(enable_currency_aware_divider, toDecimal(1, 10), toDecimal(100, 10)) AS currency_aware_divider,
                    divideDecimal(original_amount, currency_aware_divider) AS currency_aware_amount,
                    'EUR' AS currency,
                    convertCurrency(original_currency, currency, currency_aware_amount, _toDate(ifNull(timestamp, toDateTime(0)))) AS amount
  FROM stripe_test_charge
  WHERE and(or(isNull(invoice_id), empty(invoice_id)), equals(status, 'succeeded'))
  '''
# ---
