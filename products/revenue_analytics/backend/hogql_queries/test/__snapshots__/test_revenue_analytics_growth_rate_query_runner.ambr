# serializer version: 1
# name: TestRevenueAnalyticsGrowthRateQueryRunner.test_no_crash_when_no_data
  '''
  SELECT 1
  WHERE 0
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295
  '''
# ---
# name: TestRevenueAnalyticsGrowthRateQueryRunner.test_with_data
  '''
  SELECT mrr_with_growth.month AS month,
         mrr_with_growth.mrr_avg AS mrr,
         mrr_with_growth.previous_mrr_avg AS previous_mrr,
         divide(minus(mrr_with_growth.mrr_avg, mrr_with_growth.previous_mrr_avg), mrr_with_growth.previous_mrr_avg) AS mrr_growth_rate
  FROM
    (SELECT monthly_mrr.month AS month,
            monthly_mrr.mrr AS mrr,
            avg(monthly_mrr.mrr) OVER (
                                       ORDER BY monthly_mrr.month ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS mrr_avg,
                                      avg(monthly_mrr.mrr) OVER (
                                                                 ORDER BY monthly_mrr.month ASC ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING) AS previous_mrr_avg
     FROM
       (SELECT toStartOfMonth(timestamp) AS month,
               sum(amount) AS mrr
        FROM
          (SELECT `stripe.posthog_test.charge_revenue_view`.id AS id,
                  `stripe.posthog_test.charge_revenue_view`.timestamp AS timestamp,
                  `stripe.posthog_test.charge_revenue_view`.customer_id AS customer_id,
                  `stripe.posthog_test.charge_revenue_view`.original_amount AS original_amount,
                  `stripe.posthog_test.charge_revenue_view`.original_currency AS original_currency,
                  `stripe.posthog_test.charge_revenue_view`.currency_is_zero_decimal AS currency_is_zero_decimal,
                  `stripe.posthog_test.charge_revenue_view`.amount_decimal_divider AS amount_decimal_divider,
                  `stripe.posthog_test.charge_revenue_view`.adjusted_original_amount AS adjusted_original_amount,
                  `stripe.posthog_test.charge_revenue_view`.currency AS currency,
                  `stripe.posthog_test.charge_revenue_view`.amount AS amount
           FROM
             (SELECT posthog_test_stripe_charge.id AS id,
                     parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_charge.created), 6, 'UTC') AS timestamp,
                     posthog_test_stripe_charge.customer AS customer_id,
                     accurateCastOrNull(posthog_test_stripe_charge.amount_captured, 'Decimal64(10)') AS original_amount,
                     upper(posthog_test_stripe_charge.currency) AS original_currency,
                     in(original_currency,
                        ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF']) AS currency_is_zero_decimal,
                       if(currency_is_zero_decimal, accurateCastOrNull(1, 'Decimal64(10)'), accurateCastOrNull(100, 'Decimal64(10)')) AS amount_decimal_divider,
                       divideDecimal(original_amount, amount_decimal_divider) AS adjusted_original_amount,
                       'GBP' AS currency,
                       if(equals(original_currency, currency), toDecimal64(adjusted_original_amount, 10), if(dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10)) = 0, toDecimal64(0, 10), multiplyDecimal(divideDecimal(toDecimal64(adjusted_original_amount, 10), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', original_currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))), dictGetOrDefault(`posthog_test`.`exchange_rate_dict`, 'rate', currency, toDate(ifNull(timestamp, toDateTime(0, 'UTC'))), toDecimal64(0, 10))))) AS amount
              FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.growth_rate_query_runner.stripe_charges/posthog_test_stripe_charge/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `paid` Int8, `amount` Int64, `object` String, `source` String, `status` String, `created` DateTime, `invoice` String, `outcome` String, `captured` Int8, `currency` String, `customer` String, `disputed` Int8, `livemode` Int8, `metadata` String, `refunded` Int8, `description` String, `receipt_url` String, `failure_code` String, `fraud_details` String, `radar_options` String, `receipt_email` String, `payment_intent` String, `payment_method` String, `amount_captured` Int64, `amount_refunded` Int64, `billing_details` String, `failure_message` String, `balance_transaction` String, `statement_descriptor` String, `payment_method_details` String, `calculated_statement_descriptor` String') AS posthog_test_stripe_charge
              WHERE equals(posthog_test_stripe_charge.status, 'succeeded')) AS `stripe.posthog_test.charge_revenue_view`)
        GROUP BY month
        ORDER BY month ASC) AS monthly_mrr) AS mrr_with_growth
  WHERE isNotNull(mrr_with_growth.previous_mrr_avg)
  ORDER BY mrr_with_growth.month DESC
  LIMIT 24 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    transform_null_in=1,
                    optimize_min_equality_disjunction_chain_length=4294967295
  '''
# ---
