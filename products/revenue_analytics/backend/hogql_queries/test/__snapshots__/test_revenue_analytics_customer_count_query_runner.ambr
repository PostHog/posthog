# serializer version: 1
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_no_crash_when_no_data
  '''
  SELECT 1 AS breakdown_by,
         1 AS period_start,
         1 AS subscription_count,
         1 AS new_subscription_count,
         1 AS churned_subscription_count,
         1 AS customer_count
  WHERE 0
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=1,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_no_crash_when_no_source_is_selected
  '''
  SELECT revenue_analytics_subscription.source_label AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2024-11-01 00:00:00', '2024-12-01 00:00:00', '2025-01-01 00:00:00', '2025-02-01 00:00:00', '2025-03-01 00:00:00', '2025-04-01 00:00:00', '2025-05-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  LEFT JOIN
    (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
            `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
            `stripe.posthog_test.customer_revenue_view`.name AS name,
            `stripe.posthog_test.customer_revenue_view`.email AS email,
            `stripe.posthog_test.customer_revenue_view`.phone AS phone,
            `stripe.posthog_test.customer_revenue_view`.address AS address,
            `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
            `stripe.posthog_test.customer_revenue_view`.country AS country,
            `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
            `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
            `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id
     FROM
       (SELECT outer.id AS id,
               'stripe.posthog_test' AS source_label,
               parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
               outer.name AS name,
               outer.email AS email,
               outer.phone AS phone,
               outer.address AS address,
               outer.metadata AS metadata,
               JSONExtractString(address, 'country') AS country,
               NULL AS cohort,
               NULL AS initial_coupon,
               NULL AS initial_coupon_id
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String') AS outer) AS `stripe.posthog_test.customer_revenue_view`
     UNION ALL SELECT `revenue_analytics.purchase.customer_events_revenue_view`.id AS id,
                      `revenue_analytics.purchase.customer_events_revenue_view`.source_label AS source_label,
                      `revenue_analytics.purchase.customer_events_revenue_view`.timestamp AS timestamp,
                      `revenue_analytics.purchase.customer_events_revenue_view`.name AS name,
                      `revenue_analytics.purchase.customer_events_revenue_view`.email AS email,
                      `revenue_analytics.purchase.customer_events_revenue_view`.phone AS phone,
                      `revenue_analytics.purchase.customer_events_revenue_view`.address AS address,
                      `revenue_analytics.purchase.customer_events_revenue_view`.metadata AS metadata,
                      `revenue_analytics.purchase.customer_events_revenue_view`.country AS country,
                      `revenue_analytics.purchase.customer_events_revenue_view`.cohort AS cohort,
                      `revenue_analytics.purchase.customer_events_revenue_view`.initial_coupon AS initial_coupon,
                      `revenue_analytics.purchase.customer_events_revenue_view`.initial_coupon_id AS initial_coupon_id
     FROM
       (SELECT toString(persons.id) AS id,
               'revenue_analytics.purchase' AS source_label,
               persons.created_at AS timestamp,
               persons.properties___name AS name,
               persons.properties___email AS email,
               persons.properties___phone AS phone,
               persons.properties___address AS address,
               persons.properties___metadata AS metadata,
               persons.`properties___$geoip_country_name` AS country,
               formatDateTime(toStartOfMonth(persons.created_at), '%Y-%m') AS cohort,
               NULL AS initial_coupon,
               NULL AS initial_coupon_id
        FROM
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'phone'), ''), 'null'), '^"|"$', '') AS properties___phone,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'address'), ''), 'null'), '^"|"$', '') AS properties___address,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'metadata'), ''), 'null'), '^"|"$', '') AS properties___metadata,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$geoip_country_name'), ''), 'null'), '^"|"$', '') AS `properties___$geoip_country_name`,
                  toTimeZone(person.created_at, 'UTC') AS created_at
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))
                                                          ORDER BY argMax(toTimeZone(person.created_at, 'UTC'), person.version) DESC))) SETTINGS optimize_aggregation_in_order=1) AS persons
        INNER JOIN
          (SELECT DISTINCT events__person.id AS person_id
           FROM events
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id
              FROM person
              WHERE equals(person.team_id, 99999)
              GROUP BY person.id
              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
           WHERE and(equals(events.team_id, 99999), 1)) AS events ON equals(persons.id, events.person_id)
        ORDER BY persons.created_at DESC) AS `revenue_analytics.purchase.customer_events_revenue_view`) AS revenue_analytics_customer ON equals(revenue_analytics_subscription.customer_id, revenue_analytics_customer.id)
  WHERE ifNull(equals(revenue_analytics_customer.source_label, 'non-existent-source'), 0)
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_with_country_filter
  '''
  SELECT revenue_analytics_subscription.source_label AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2024-11-01 00:00:00', '2024-12-01 00:00:00', '2025-01-01 00:00:00', '2025-02-01 00:00:00', '2025-03-01 00:00:00', '2025-04-01 00:00:00', '2025-05-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  LEFT JOIN
    (SELECT `stripe.posthog_test.customer_revenue_view`.id AS id,
            `stripe.posthog_test.customer_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.customer_revenue_view`.timestamp AS timestamp,
            `stripe.posthog_test.customer_revenue_view`.name AS name,
            `stripe.posthog_test.customer_revenue_view`.email AS email,
            `stripe.posthog_test.customer_revenue_view`.phone AS phone,
            `stripe.posthog_test.customer_revenue_view`.address AS address,
            `stripe.posthog_test.customer_revenue_view`.metadata AS metadata,
            `stripe.posthog_test.customer_revenue_view`.country AS country,
            `stripe.posthog_test.customer_revenue_view`.cohort AS cohort,
            `stripe.posthog_test.customer_revenue_view`.initial_coupon AS initial_coupon,
            `stripe.posthog_test.customer_revenue_view`.initial_coupon_id AS initial_coupon_id
     FROM
       (SELECT outer.id AS id,
               'stripe.posthog_test' AS source_label,
               parseDateTime64BestEffortOrNull(toString(outer.created), 6, 'UTC') AS timestamp,
               outer.name AS name,
               outer.email AS email,
               outer.phone AS phone,
               outer.address AS address,
               outer.metadata AS metadata,
               JSONExtractString(address, 'country') AS country,
               NULL AS cohort,
               NULL AS initial_coupon,
               NULL AS initial_coupon_id
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_customers/posthog_test_stripe_customer/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `email` String, `phone` String, `address` String, `created` DateTime, `metadata` String') AS outer) AS `stripe.posthog_test.customer_revenue_view`
     UNION ALL SELECT `revenue_analytics.purchase.customer_events_revenue_view`.id AS id,
                      `revenue_analytics.purchase.customer_events_revenue_view`.source_label AS source_label,
                      `revenue_analytics.purchase.customer_events_revenue_view`.timestamp AS timestamp,
                      `revenue_analytics.purchase.customer_events_revenue_view`.name AS name,
                      `revenue_analytics.purchase.customer_events_revenue_view`.email AS email,
                      `revenue_analytics.purchase.customer_events_revenue_view`.phone AS phone,
                      `revenue_analytics.purchase.customer_events_revenue_view`.address AS address,
                      `revenue_analytics.purchase.customer_events_revenue_view`.metadata AS metadata,
                      `revenue_analytics.purchase.customer_events_revenue_view`.country AS country,
                      `revenue_analytics.purchase.customer_events_revenue_view`.cohort AS cohort,
                      `revenue_analytics.purchase.customer_events_revenue_view`.initial_coupon AS initial_coupon,
                      `revenue_analytics.purchase.customer_events_revenue_view`.initial_coupon_id AS initial_coupon_id
     FROM
       (SELECT toString(persons.id) AS id,
               'revenue_analytics.purchase' AS source_label,
               persons.created_at AS timestamp,
               persons.properties___name AS name,
               persons.properties___email AS email,
               persons.properties___phone AS phone,
               persons.properties___address AS address,
               persons.properties___metadata AS metadata,
               persons.`properties___$geoip_country_name` AS country,
               formatDateTime(toStartOfMonth(persons.created_at), '%Y-%m') AS cohort,
               NULL AS initial_coupon,
               NULL AS initial_coupon_id
        FROM
          (SELECT person.id AS id,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'phone'), ''), 'null'), '^"|"$', '') AS properties___phone,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'address'), ''), 'null'), '^"|"$', '') AS properties___address,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'metadata'), ''), 'null'), '^"|"$', '') AS properties___metadata,
                  replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, '$geoip_country_name'), ''), 'null'), '^"|"$', '') AS `properties___$geoip_country_name`,
                  toTimeZone(person.created_at, 'UTC') AS created_at
           FROM person
           WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                         (SELECT person.id AS id, max(person.version) AS version
                                                          FROM person
                                                          WHERE equals(person.team_id, 99999)
                                                          GROUP BY person.id
                                                          HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0))
                                                          ORDER BY argMax(toTimeZone(person.created_at, 'UTC'), person.version) DESC))) SETTINGS optimize_aggregation_in_order=1) AS persons
        INNER JOIN
          (SELECT DISTINCT events__person.id AS person_id
           FROM events
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id
              FROM person
              WHERE equals(person.team_id, 99999)
              GROUP BY person.id
              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
           WHERE and(equals(events.team_id, 99999), 1)) AS events ON equals(persons.id, events.person_id)
        ORDER BY persons.created_at DESC) AS `revenue_analytics.purchase.customer_events_revenue_view`) AS revenue_analytics_customer ON equals(revenue_analytics_subscription.customer_id, revenue_analytics_customer.id)
  WHERE ifNull(equals(revenue_analytics_customer.country, 'US'), 0)
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_with_data
  '''
  SELECT revenue_analytics_subscription.source_label AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2024-11-01 00:00:00', '2024-12-01 00:00:00', '2025-01-01 00:00:00', '2025-02-01 00:00:00', '2025-03-01 00:00:00', '2025-04-01 00:00:00', '2025-05-01 00:00:00', '2025-06-01 00:00:00', '2025-07-01 00:00:00', '2025-08-01 00:00:00', '2025-09-01 00:00:00', '2025-10-01 00:00:00', '2025-11-01 00:00:00', '2025-12-01 00:00:00', '2026-01-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_with_data_and_date_range
  '''
  SELECT revenue_analytics_subscription.source_label AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2025-02-01 00:00:00', '2025-03-01 00:00:00', '2025-04-01 00:00:00', '2025-05-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_with_data_and_product_grouping
  '''
  SELECT concat(ifNull(toString(revenue_analytics_subscription.source_label), ''), ' - ', ifNull(toString(coalesce(revenue_analytics_product.name, '<none>')), '')) AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2024-11-01 00:00:00', '2024-12-01 00:00:00', '2025-01-01 00:00:00', '2025-02-01 00:00:00', '2025-03-01 00:00:00', '2025-04-01 00:00:00', '2025-05-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  LEFT JOIN
    (SELECT `stripe.posthog_test.product_revenue_view`.id AS id,
            `stripe.posthog_test.product_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.product_revenue_view`.name AS name
     FROM
       (SELECT posthog_test_stripe_product.id AS id,
               'stripe.posthog_test' AS source_label,
               posthog_test_stripe_product.name AS name
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_products/posthog_test_stripe_product/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `type` String, `active` UInt8, `images` String, `object` String, `created` DateTime, `features` String, `livemode` UInt8, `metadata` String, `tax_code` String, `attributes` String, `updated_at` DateTime, `description` String, `default_price_id` String') AS posthog_test_stripe_product) AS `stripe.posthog_test.product_revenue_view`) AS revenue_analytics_product ON equals(revenue_analytics_subscription.product_id, revenue_analytics_product.id)
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_with_empty_date_range
  '''
  SELECT revenue_analytics_subscription.source_label AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2024-12-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_with_product_filter
  '''
  SELECT revenue_analytics_subscription.source_label AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2024-11-01 00:00:00', '2024-12-01 00:00:00', '2025-01-01 00:00:00', '2025-02-01 00:00:00', '2025-03-01 00:00:00', '2025-04-01 00:00:00', '2025-05-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  LEFT JOIN
    (SELECT `stripe.posthog_test.product_revenue_view`.id AS id,
            `stripe.posthog_test.product_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.product_revenue_view`.name AS name
     FROM
       (SELECT posthog_test_stripe_product.id AS id,
               'stripe.posthog_test' AS source_label,
               posthog_test_stripe_product.name AS name
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_products/posthog_test_stripe_product/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `type` String, `active` UInt8, `images` String, `object` String, `created` DateTime, `features` String, `livemode` UInt8, `metadata` String, `tax_code` String, `attributes` String, `updated_at` DateTime, `description` String, `default_price_id` String') AS posthog_test_stripe_product) AS `stripe.posthog_test.product_revenue_view`) AS revenue_analytics_product ON equals(revenue_analytics_subscription.product_id, revenue_analytics_product.id)
  WHERE ifNull(equals(revenue_analytics_product.name, 'Product C'), 0)
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
# name: TestRevenueAnalyticsCustomerCountQueryRunner.test_with_product_filter.1
  '''
  SELECT concat(ifNull(toString(revenue_analytics_subscription.source_label), ''), ' - ', ifNull(toString(coalesce(revenue_analytics_product.name, '<none>')), '')) AS breakdown_by,
         toStartOfMonth(parseDateTime64BestEffortOrNull(arrayJoin(['2024-11-01 00:00:00', '2024-12-01 00:00:00', '2025-01-01 00:00:00', '2025-02-01 00:00:00', '2025-03-01 00:00:00', '2025-04-01 00:00:00', '2025-05-01 00:00:00']), 6, 'UTC')) AS period_start,
         countIf(DISTINCT revenue_analytics_subscription.id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.started_at))
                                                                    and isNull(period_start))) AS new_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.id, ifNull(equals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), isNull(toStartOfMonth(revenue_analytics_subscription.ended_at))
                                                                    and isNull(period_start))) AS churned_subscription_count,
         countIf(DISTINCT revenue_analytics_subscription.customer_id, and(ifNull(lessOrEquals(toStartOfMonth(revenue_analytics_subscription.started_at), period_start), 0), or(isNull(revenue_analytics_subscription.ended_at), ifNull(greaterOrEquals(toStartOfMonth(revenue_analytics_subscription.ended_at), period_start), 0)))) AS customer_count
  FROM
    (SELECT `stripe.posthog_test.subscription_revenue_view`.id AS id,
            `stripe.posthog_test.subscription_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.subscription_revenue_view`.plan_id AS plan_id,
            `stripe.posthog_test.subscription_revenue_view`.product_id AS product_id,
            `stripe.posthog_test.subscription_revenue_view`.customer_id AS customer_id,
            `stripe.posthog_test.subscription_revenue_view`.status AS status,
            `stripe.posthog_test.subscription_revenue_view`.started_at AS started_at,
            `stripe.posthog_test.subscription_revenue_view`.ended_at AS ended_at,
            `stripe.posthog_test.subscription_revenue_view`.current_period_start AS current_period_start,
            `stripe.posthog_test.subscription_revenue_view`.current_period_end AS current_period_end,
            `stripe.posthog_test.subscription_revenue_view`.metadata AS metadata
     FROM
       (SELECT posthog_test_stripe_subscription.id AS id,
               'stripe.posthog_test' AS source_label,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'id') AS plan_id,
               JSONExtractString(posthog_test_stripe_subscription.plan, 'product') AS product_id,
               posthog_test_stripe_subscription.customer AS customer_id,
               posthog_test_stripe_subscription.status AS status,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.created), 6, 'UTC') AS started_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.ended_at), 6, 'UTC') AS ended_at,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_start), 6, 'UTC') AS current_period_start,
               parseDateTime64BestEffortOrNull(toString(posthog_test_stripe_subscription.current_period_end), 6, 'UTC') AS current_period_end,
               posthog_test_stripe_subscription.metadata AS metadata
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_subscriptions/posthog_test_stripe_subscription/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `plan` String, `status` String, `created` DateTime, `customer` String, `ended_at` DateTime, `metadata` String, `current_period_end` DateTime, `current_period_start` DateTime') AS posthog_test_stripe_subscription) AS `stripe.posthog_test.subscription_revenue_view`) AS revenue_analytics_subscription
  LEFT JOIN
    (SELECT `stripe.posthog_test.product_revenue_view`.id AS id,
            `stripe.posthog_test.product_revenue_view`.source_label AS source_label,
            `stripe.posthog_test.product_revenue_view`.name AS name
     FROM
       (SELECT posthog_test_stripe_product.id AS id,
               'stripe.posthog_test' AS source_label,
               posthog_test_stripe_product.name AS name
        FROM s3('http://host.docker.internal:19000/posthog/test_storage_bucket-posthog.revenue_analytics.insights_query_runner.stripe_products/posthog_test_stripe_product/*.csv', 'object_storage_root_user', 'object_storage_root_password', 'CSVWithNames', '`id` String, `name` String, `type` String, `active` UInt8, `images` String, `object` String, `created` DateTime, `features` String, `livemode` UInt8, `metadata` String, `tax_code` String, `attributes` String, `updated_at` DateTime, `description` String, `default_price_id` String') AS posthog_test_stripe_product) AS `stripe.posthog_test.product_revenue_view`) AS revenue_analytics_product ON equals(revenue_analytics_subscription.product_id, revenue_analytics_product.id)
  WHERE ifNull(equals(revenue_analytics_product.name, 'Product C'), 0)
  GROUP BY breakdown_by,
           period_start
  ORDER BY breakdown_by ASC,
           period_start ASC,
           subscription_count DESC,
           customer_count DESC
  LIMIT 10000 SETTINGS readonly=2,
                       max_execution_time=60,
                       allow_experimental_object_type=1,
                       format_csv_allow_double_quotes=1,
                       max_ast_elements=4000000,
                       max_expanded_ast_elements=4000000,
                       max_bytes_before_external_group_by=0,
                       transform_null_in=1,
                       optimize_min_equality_disjunction_chain_length=4294967295,
                       allow_experimental_join_condition=1
  '''
# ---
