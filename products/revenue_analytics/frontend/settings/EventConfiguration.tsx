import { IconInfo, IconTrash } from '@posthog/icons'
import { LemonSwitch, Tooltip } from '@posthog/lemon-ui'
import { useActions, useValues } from 'kea'
import { CurrencyDropdown } from 'lib/components/BaseCurrency/CurrencyDropdown'
import { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'
import { TaxonomicPopover } from 'lib/components/TaxonomicPopover/TaxonomicPopover'
import { LemonButton } from 'lib/lemon-ui/LemonButton'
import { LemonTable } from 'lib/lemon-ui/LemonTable'
import { teamLogic } from 'scenes/teamLogic'

import { RevenueAnalyticsEventItem } from '~/queries/schema/schema-general'

import { revenueAnalyticsSettingsLogic } from './revenueAnalyticsSettingsLogic'

export function EventConfiguration({ buttonRef }: { buttonRef?: React.RefObject<HTMLButtonElement> }): JSX.Element {
    const { baseCurrency } = useValues(teamLogic)
    const { events, saveEventsDisabledReason, changesMadeToEvents } = useValues(revenueAnalyticsSettingsLogic)
    const {
        addEvent,
        deleteEvent,
        updateEventCouponProperty,
        updateEventCurrencyAwareDecimalProperty,
        updateEventCurrencyProperty,
        updateEventProductProperty,
        updateEventRevenueProperty,
        updateEventSubscriptionProperty,
        save,
    } = useActions(revenueAnalyticsSettingsLogic)

    return (
        <div>
            <h3 className="mb-2">Event Configuration</h3>
            <p className="mb-4">
                PostHog can display revenue data in our Revenue Analytics product from any event. You can configure as
                many events as you want, and specify the revenue property and currency for each event individually.
            </p>
            <div className="flex flex-col mb-1 items-end w-full">
                <div className="flex flex-row w-full gap-1 justify-end my-2">
                    <TaxonomicPopover
                        type="primary"
                        groupType={TaxonomicFilterGroupType.CustomEvents}
                        onChange={(eventName) => addEvent(eventName as string, baseCurrency)}
                        value={undefined}
                        placeholder="Create revenue event"
                        placeholderClass=""
                        excludedProperties={{
                            [TaxonomicFilterGroupType.CustomEvents]: [null, ...events.map((item) => item.eventName)],
                        }}
                        id="data-management-revenue-settings-add-event"
                        ref={buttonRef}
                    />

                    {changesMadeToEvents && (
                        <LemonButton type="primary" onClick={save} disabledReason={saveEventsDisabledReason}>
                            Save
                        </LemonButton>
                    )}
                </div>
                {changesMadeToEvents && (
                    <span className="text-xs text-error normal-case font-normal">
                        Remember to save your changes to take effect
                    </span>
                )}
            </div>
            <LemonTable<RevenueAnalyticsEventItem>
                dataSource={events}
                rowKey={(item) => item.eventName}
                emptyState="No event sources configured yet"
                columns={[
                    { key: 'eventName', title: 'Event name˟', dataIndex: 'eventName' },
                    {
                        key: 'revenueProperty',
                        dataIndex: 'revenueProperty',
                        title: 'Revenue property˟',
                        tooltip:
                            'The property that tracks the amount of revenue generated by the event. This could be a different property for each event.',

                        render: (_, item: RevenueAnalyticsEventItem) => {
                            return (
                                <div className="flex flex-row w-full my-1">
                                    <TaxonomicPopover
                                        showNumericalPropsOnly
                                        size="small"
                                        groupType={TaxonomicFilterGroupType.EventProperties}
                                        onChange={(newPropertyName) =>
                                            updateEventRevenueProperty(item.eventName, newPropertyName)
                                        }
                                        value={item.revenueProperty}
                                        placeholder="Choose property"
                                        disabledReason={
                                            item.eventName === '$pageview' || item.eventName === '$autocapture'
                                                ? 'Built-in events must use revenue'
                                                : undefined
                                        }
                                    />
                                </div>
                            )
                        },
                    },
                    {
                        key: 'revenueCurrencyProperty',
                        dataIndex: 'revenueCurrencyProperty',
                        title: 'Currency property˟',
                        tooltip:
                            'The currency of the revenue event. You can choose between a property on your event OR a fixed currency for all events.',
                        render: (_, item: RevenueAnalyticsEventItem) => {
                            return (
                                <div className="flex flex-col w-full gap-3 my-1 whitespace-nowrap">
                                    <div className="flex flex-row gap-1">
                                        <span className="font-bold">Dynamic property: </span>
                                        <TaxonomicPopover
                                            size="small"
                                            groupType={TaxonomicFilterGroupType.EventProperties}
                                            onChange={(newPropertyName) =>
                                                updateEventCurrencyProperty(item.eventName, {
                                                    property: newPropertyName,
                                                })
                                            }
                                            value={item.revenueCurrencyProperty.property ?? null}
                                            placeholder="Choose property"
                                        />
                                    </div>
                                    <div className="flex flex-row gap-1">
                                        or <span className="font-bold">Static currency: </span>
                                        <CurrencyDropdown
                                            size="small"
                                            onChange={(currency) =>
                                                updateEventCurrencyProperty(item.eventName, {
                                                    static: currency,
                                                })
                                            }
                                            value={item.revenueCurrencyProperty.static ?? null}
                                        />
                                    </div>
                                    <div className="flex flex-row gap-1">
                                        <Tooltip title="Whether you are sending revenue in the smallest unit of currency (e.g. cents for USD, yen for JPY) or on the normal denomination (e.g. dollars for USD, yen for JPY). If enabled, we divide the property value by the smallest unit of currency (e.g. 100 for USD, 1 for JPY).">
                                            <span className="font-bold">In cents? </span>
                                            <IconInfo />
                                        </Tooltip>
                                        <LemonSwitch
                                            checked={item.currencyAwareDecimal}
                                            onChange={(checked) =>
                                                updateEventCurrencyAwareDecimalProperty(item.eventName, checked)
                                            }
                                        />
                                    </div>
                                </div>
                            )
                        },
                    },
                    {
                        key: 'productProperty',
                        dataIndex: 'productProperty',
                        title: 'Product property',
                        tooltip:
                            'The property that tracks which product generated this revenue event. Useful if you wanna break revenue down by individual products.',
                        render: (_, item: RevenueAnalyticsEventItem) => {
                            return (
                                <div className="flex flex-row w-full my-1">
                                    <TaxonomicPopover
                                        size="small"
                                        className="my-1"
                                        groupType={TaxonomicFilterGroupType.EventProperties}
                                        onChange={(newPropertyName) =>
                                            updateEventProductProperty(item.eventName, newPropertyName)
                                        }
                                        value={item.productProperty}
                                        placeholder="Choose property"
                                    />
                                </div>
                            )
                        },
                    },
                    {
                        key: 'couponProperty',
                        dataIndex: 'couponProperty',
                        title: 'Coupon property',
                        tooltip:
                            'The property that tracks which coupon generated this revenue event. Useful if you wanna break revenue down by individual coupons.',
                        render: (_, item: RevenueAnalyticsEventItem) => {
                            return (
                                <div className="flex flex-row w-full my-1">
                                    <TaxonomicPopover
                                        size="small"
                                        className="my-1"
                                        groupType={TaxonomicFilterGroupType.EventProperties}
                                        onChange={(newPropertyName) =>
                                            updateEventCouponProperty(item.eventName, newPropertyName)
                                        }
                                        value={item.couponProperty}
                                        placeholder="Choose property"
                                    />
                                </div>
                            )
                        },
                    },
                    {
                        key: 'subscriptionProperty',
                        dataIndex: 'subscriptionProperty',
                        title: 'Subscription property',
                        tooltip:
                            'The property that tracks which subscription generated this revenue event. Useful if you wanna be able to track ARPU and LTV.',
                        render: (_, item: RevenueAnalyticsEventItem) => {
                            return (
                                <div className="flex flex-row w-full my-1">
                                    <TaxonomicPopover
                                        size="small"
                                        className="my-1"
                                        groupType={TaxonomicFilterGroupType.EventProperties}
                                        onChange={(newPropertyName) =>
                                            updateEventSubscriptionProperty(item.eventName, newPropertyName)
                                        }
                                        value={item.subscriptionProperty}
                                        placeholder="Choose property"
                                    />
                                </div>
                            )
                        },
                    },
                    {
                        key: 'actions',
                        render: (_, item) => (
                            <LemonButton
                                size="small"
                                type="secondary"
                                onClick={() => deleteEvent(item.eventName)}
                                icon={<IconTrash />}
                            >
                                Remove
                            </LemonButton>
                        ),
                    },
                ]}
            />
        </div>
    )
}
