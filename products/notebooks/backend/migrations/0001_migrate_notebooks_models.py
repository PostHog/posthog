# Generated by Django 4.2.22 on 2025-10-15 12:15

import django.utils.timezone
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import posthog.utils
import posthog.models.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("posthog", "0885_migrate_notebooks_models"),
    ]

    database_operations: list[migrations.RunSQL] = [
        # No database operations - table already exists with this name
    ]

    state_operations = [
        migrations.CreateModel(
            name="Notebook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("short_id", models.CharField(blank=True, default=posthog.utils.generate_short_id, max_length=12)),
                ("title", models.CharField(blank=True, max_length=256, null=True)),
                ("content", models.JSONField(blank=True, default=None, null=True)),
                ("text_content", models.TextField(blank=True, null=True)),
                ("deleted", models.BooleanField(default=False)),
                (
                    "visibility",
                    models.CharField(
                        choices=[("internal", "internal"), ("default", "default")], default="default", max_length=20
                    ),
                ),
                ("version", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_notebooks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="posthog.team")),
            ],
            options={
                "db_table": "posthog_notebook",
            },
        ),
        migrations.CreateModel(
            name="ResourceNotebook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=posthog.models.utils.UUIDT, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("group", models.IntegerField(blank=True, db_column="group_id", null=True)),
                (
                    "notebook",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="resources", to="notebooks.notebook"
                    ),
                ),
            ],
            options={
                "db_table": "posthog_resourcenotebook",
            },
        ),
        migrations.AddConstraint(
            model_name="resourcenotebook",
            constraint=models.UniqueConstraint(
                condition=models.Q(("group__isnull", False)), fields=("notebook", "group"), name="unique_notebook_group"
            ),
        ),
        migrations.AddConstraint(
            model_name="resourcenotebook",
            constraint=models.CheckConstraint(
                check=models.Q(models.Q(("group__isnull", False)), _connector="OR"),
                name="exactly_one_notebook_related_resource",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="resourcenotebook",
            unique_together={("notebook", "group")},
        ),
        migrations.AlterUniqueTogether(
            name="notebook",
            unique_together={("team", "short_id")},
        ),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(database_operations=database_operations, state_operations=state_operations)
    ]
